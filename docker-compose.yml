version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: tracky
      MYSQL_USER: admin
      MYSQL_PASSWORD: tracky1234
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql # volumes: 아래에 이름만 지정된 볼륨(mysql_data: 형태)은 Named Volume으로, Docker 엔진이 직접 관리하는 영역에 저장된다. (맨 아래 volumes에 mysql_data라는 볼륨을 선언해주어야 함)
      - ./my.cnf:/etc/mysql/conf.d/my_custom.cnf
      - ./mysql_logs:/var/log/mysql
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: 2
          memory: 8g

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # RabbitMQ 기본 포트
      - "15672:15672" # RabbitMQ 관리 UI 포트
    environment:
      - 'RABBITMQ_DEFAULT_USER=admin'
      - 'RABBITMQ_DEFAULT_PASS=tracky1234'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3

  hub:
    build:
      context: ./tracky-hub
      dockerfile: Dockerfile
    container_name: hub
    ports:
      - "8082:8082"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: tracky1234
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: tracky
      DB_USER: admin
      DB_PASSWORD: tracky1234
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: 2
          memory: 4g

  consumer:
    build:
      context: ./tracky-consumer
      dockerfile: Dockerfile
    container_name: consumer
    ports:
      - "8083:8083"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: tracky1234
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: tracky
      DB_USER: admin
      DB_PASSWORD: tracky1234
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --web.enable-remote-write-receiver
      - --enable-feature=native-histograms
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=1234
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/dashboards
    depends_on:
      - prometheus

  k6:
    image: grafana/k6:latest
    container_name: k6
    entrypoint: ["k6"]
    command: run -o experimental-prometheus-rw /src/test.js
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      # 현재 디렉터리(.)를 컨테이너의 /src 디렉터리에 마운트
      - ./:/src
      # 안정적인 실행을 위해 tty 옵션 추가
    tty: true
    depends_on:
      - prometheus

volumes: #  Named Volume을 명시, 위 service 안에서 마운트 시 사용한다.
  mysql_data:
  rabbitmq_data:
  grafana_data:
  prometheus_data: